---
import type { GetStaticPaths } from "astro";
import MainLayout from "@layouts/main-layout.astro";
import PokemonFullCard from "@components/pokemon/pokemon-full-card.astro";
import type { PokeAPIResponse } from "@interfaces/pokeapi-response";

// {
//   params: { name: "bulbasaur" },
//   props: { name: "bulbasaur", url: "https://pokeapi.co/api/v2/pokemon/1/" },
// },
// {
//   params: { name: "charmander" },
//   props: {
//     name: "charmander",
//     url: "https://pokeapi.co/api/v2/pokemon/4/",
//   },
// },
// {
//   params: { name: "squirtle" },
//   props: { name: "squirtle", url: "https://pokeapi.co/api/v2/pokemon/7/" },
// },

export const getStaticPaths = (async () => {
  const response = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await response.json()) as PokeAPIResponse;

  return results.map(({ name, url }) => ({
    params: { name },
    props: { name, url },
  }));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split("/").at(-2);
const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={`Pokémon ${name}`}
  description={`Información sobre el Pokémon ${name}`}
  image={imageUrl}
>
  <PokemonFullCard name={name} url={url} />
</MainLayout>

<script>
  import type { FavoritePokemon } from "@interfaces/favorite-pokemon";

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem("favoritePokemons") ?? "[]"
    );

    const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name!;
    const id = btnFavorite.dataset.id!;
    const isFavorite = favoritePokemons.some((fav) => fav.name === name);

    const heartOutline = btnFavorite.querySelector(
      "[data-outline]"
    ) as HTMLElement;
    const heartFill = btnFavorite.querySelector("[data-fill]") as HTMLElement;

    if (isFavorite) {
      heartOutline.classList.add("hidden");
      heartFill.classList.remove("hidden");
    }

    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name);

      if (isFavorite) {
        favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);
      } else {
        favoritePokemons.push({ name: name, id: +id });
      }

      localStorage.setItem(
        "favoritePokemons",
        JSON.stringify(favoritePokemons)
      );
    };

    btnFavorite.addEventListener("click", () => {
      heartOutline.classList.toggle("hidden");
      heartFill.classList.toggle("hidden");

      toggleFavorite();
    });
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>
